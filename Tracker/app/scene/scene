/* 
 * File:   scene.hpp
 * Author: akin
 *
 * Created on 20. lokakuuta 2014, 21:09
 
 Refraction
  - Screws with ray calculations, in theory, they can only screw with 90 degree angles..
    but if there be 2-n objects with refraction, the light contribution to the pixel, will
    be affected by any sorts of lights.. thus?? we need to trace ALL lights for the pixel..
    this.. just doesnt work well.. too heavy..
	optimize with light volumes? light volumes to be distorted by lenses/refraction.
  
  - definition of light volume?
 
 
 simple function that handles single channel refraction indexes?
 
 implement the channel independent raytracing? implement some functionality
 to read each refraction indexes for separate channels..
 
 -> 3+ more times rays..
 
 */

#ifndef SCENE_HPP
#define	SCENE_HPP

#include <traccore>
#include "node"
#include "camera"
#include "../material"
#include "../hitinfo"
#include "lightray"
#include <unordered_map>

class Scene
{
private:
	std::vector<Node*> nodes;
	std::vector<Node*> lights;
	std::vector<Camera*> cameras;
	
	Camera camera;
	
	Material base;
public:
	float max;
	float infinite;
	std::string name;
	Color ambient;
private:
public:
    Scene();
    ~Scene();
	
	const Material& getMaterialAt( const glm::vec3& position ) const;

	void add( Node *node );
	void add( Camera *camera );
	
	void trace( const Ray& ray , HitInfo& info ) const;

	const std::vector<Camera*>& getCameras() const;
};

#endif	// SCENE_HPP

